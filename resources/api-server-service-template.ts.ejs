<% if (utils.isPresentableEntity(entity) && entity.api) { -%>
import { <%= entity.strings.entityClass %> } from '../<%= entity.strings.entityPackage %>';
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
import {
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from './<%= entity.strings.typePackage %>';
  <%_ if (entity.api.booleans.hasGetMany || entity.api.booleans.hasCreateOne || entity.api.booleans.hasUpdateOne) { -%>
import {
    <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
    <%_ } -%>
} from '<%= entity.api.request.import %>';
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export abstract class <%= `${entity.api.strings.serviceClass}Base` %> {
  <%_ if (entity.api.service.fields?.length) { -%>
    <%_ entity.api.service.fields.forEach((field) => { -%>
  protected <%= field.name %>: <%= field.type %>;
    <%_ }); -%>

  public constructor(
    <%_ entity.api.service.fields.forEach((field) => { -%>
    <%= field.name %>: <%= field.type %>,
    <%_ }); -%>
  ) {
    <%_ entity.api.service.fields.forEach((field) => { -%>
    this.<%= field.name %> = <%= field.name %>;
    <%_ }); -%>
  }
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>

  public async beforeGetMany(query: <%= entity.api.strings.getManyQuery %>): Promise<void> {}

  public async afterGetMany(many: <%= entity.strings.entityClass %>[], query: <%= entity.api.strings.getManyQuery %>): Promise<void> {}

  public abstract getMany(query: <%= entity.api.strings.getManyQuery %>): Promise<<%= entity.strings.entityClass %>[]>;
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>

  public async beforeGetOne(params: <%= entity.api.strings.getOneParams %>): Promise<void> {}

  public async afterGetOne(one: <%= entity.strings.entityClass %>, params: <%= entity.api.strings.getOneParams %>): Promise<void> {}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneRequest) { -%>

  public abstract getOne(params: <%= entity.api.strings.getOneParams %>): Promise<<%= entity.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

  public async beforeCreateOne(body: <%= entity.api.strings.createOneBody %>): Promise<void> {}

  public async afterCreateOne(createdOne: <%= entity.strings.entityClass %>, body: <%= entity.api.strings.createOneBody %>): Promise<void> {}

  public abstract createOne(body: <%= entity.api.strings.createOneBody %>): Promise<<%= entity.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

  public async beforeUpdateOne(one: <%= entity.strings.entityClass %>, body: <%= entity.api.strings.updateOneBody %>): Promise<void> {}

  public async afterUpdateOne(updatedOne: <%= entity.strings.entityClass %>, body: <%= entity.api.strings.updateOneBody %>): Promise<void> {}

  public abstract updateOne(one: <%= entity.strings.entityClass %>, body: <%= entity.api.strings.updateOneBody %>): Promise<<%= entity.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

  public async beforeDeleteOne(one: <%= entity.strings.entityClass %>): Promise<void> {}

  public async afterDeleteOne(deletedOne: <%= entity.strings.entityClass %>): Promise<void> {}

  public abstract deleteOne(one: <%= entity.strings.entityClass %>): Promise<<%= entity.strings.entityClass %>>;
  <%_ } -%>
}
<% } -%>
