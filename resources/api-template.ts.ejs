<% if (utils.isPresentableEntity(entity)) { -%>
import { getMax, getMin } from 'airext';
import {
  <%= entity.strings.fieldRequestClass %>,
  <%= entity.strings.responseClass %>,
  <%= getManyResponseName() %>,
  <%= getOneResponseName() %>,
  <%_ if (entity.api && hasInternalGetOne()) { -%>
  <%= getGetOneParamsName() %>,
  <%_ } -%>
} from './<%= entity.strings.typePackage %>';
import { <%= entity.strings.entityClass %> } from '../<%= entity.strings.entityPackage %>';
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
import { <%= type.name %> } from './<%= entity.strings.typePackage %>';
  <%_ }); -%>
  <%_ if (entity.api) { -%>
import { <%= getServiceName() %> } from '<%= entity.api.service.import %>';
    <%_ if (hasGetMany() || hasCreateOne() || hasUpdateOne()) { -%>
import {
      <%_ if (hasGetMany()) { -%>
  <%= getGetManyQueryName() %>,
      <%_ } -%>
      <%_ if (hasCreateOne()) { -%>
  <%= getCreateOneBodyName() %>,
      <%_ } -%>
      <%_ if (hasUpdateOne()) { -%>
  <%= getUpdateOneBodyName() %>,
      <%_ } -%>
} from '<%= entity.api.request.import %>';
    <%_ } -%>
  <%_ } -%>

// api response builders

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `build${getManyResponseName()}` %>(
  many: <%= entity.strings.entityClass %>[],
  fieldRequest?: <%= entity.strings.fieldRequestClass %> | boolean,
): Promise<<%= getManyResponseName() %>> {
  const <%= getManyEntitiesVarName() %> = await <%= entity.strings.entityClass %>.presentMany(many, fieldRequest);
  <%_ entity.fields.filter(isCursorField).forEach((field) => { -%>
  const <%= utils.pluralize(field.name) %> = many.map((one) => one.<%= field.name %>);
  const <%= `min${utils.toTitleCase(field.name)}` %> = getMin(<%= utils.pluralize(field.name) %>);
  const <%= `max${utils.toTitleCase(field.name)}` %> = getMax(<%= utils.pluralize(field.name) %>);
  <%_ }); -%>
  const cursor = {
    count: many.length,
  <%_ entity.fields.filter(isCursorField).forEach((field) => { -%>
    <%= `min${utils.toTitleCase(field.name)}` %>,
    <%= `max${utils.toTitleCase(field.name)}` %>,
  <%_ }); -%>
  };
  return { cursor, <%= getManyEntitiesVarName() %> };
}

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `build${getOneResponseName()}` %>(
  one: <%= entity.strings.entityClass %>,
  fieldRequest?: <%= entity.strings.fieldRequestClass %> | boolean,
): Promise<<%= getOneResponseName() %>> {
  const <%= getOneEntityVarName() %> = await one.present(fieldRequest);
  return { <%= getOneEntityVarName() %> };
}
  <%_ if (entity.api) { -%>
    <%_ if (hasGetMany() || hasInternalGetOne()) { -%>

// api executors
    <%_ } -%>
    <%_ if (hasGetMany()) { -%>

      <%_ if (entity.deprecated) { -%>
/** @deprecated */
      <%_ } -%>
export async function <%= `getMany${getPluralEntName()}` %>(
  query: <%= getGetManyQueryName() %>,
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
      <%_ }); -%>
  fieldRequest?: <%= entity.strings.fieldRequestClass %>,
): Promise<<%= getManyResponseName() %>> {
  const service = new <%= getServiceName() %>(
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
      <%_ }); -%>
  );
  await service.beforeGetMany(query);
  const many = await service.getMany(query);
  await service.afterGetMany(many, query);
  return await <%= `build${getManyResponseName()}` %>(many, fieldRequest);
}
    <%_ } -%>
    <%_ if (hasGetOne()) { -%>

      <%_ if (entity.deprecated) { -%>
/** @deprecated */
      <%_ } -%>
export async function <%= `getOne${getSingularEntName()}` %>(
  params: <%= getGetOneParamsName() %>,
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
      <%_ }); -%>
  fieldRequest?: <%= entity.strings.fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
      <%_ }); -%>
  );
  await service.beforeGetOne(params);
  const one = await service.getOne(params);
  await service.afterGetOne(one, params);
  return await <%= `build${getOneResponseName()}` %>(one, fieldRequest);
}
    <%_ } -%>
    <%_ if (hasCreateOne()) { -%>

      <%_ if (entity.deprecated) { -%>
/** @deprecated */
      <%_ } -%>
export async function <%= `createOne${getSingularEntName()}` %>(
  body: <%= getCreateOneBodyName() %>,
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
      <%_ }); -%>
  fieldRequest?: <%= entity.strings.fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
      <%_ }); -%>
  );
  await service.beforeCreateOne(body);
  const one = await service.createOne(body);
  await service.afterCreateOne(one, body);
  return await <%= `build${getOneResponseName()}` %>(one, fieldRequest);
}
    <%_ } -%>
    <%_ if (hasUpdateOne()) { -%>

      <%_ if (entity.deprecated) { -%>
/** @deprecated */
      <%_ } -%>
export async function <%= `updateOne${getSingularEntName()}` %>(
  params: <%= getGetOneParamsName() %>,
  body: <%= getUpdateOneBodyName() %>,
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
      <%_ }); -%>
  fieldRequest?: <%= entity.strings.fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
      <%_ }); -%>
  );
  const one = await service.getOne(params);
  await service.beforeUpdateOne(one, body);
  const updatedOne = await service.updateOne(one, body);
  await service.afterUpdateOne(updatedOne, body);
  return await <%= `build${getOneResponseName()}` %>(updatedOne, fieldRequest);
}
    <%_ } -%>
    <%_ if (hasDeleteOne()) { -%>

      <%_ if (entity.deprecated) { -%>
/** @deprecated */
      <%_ } -%>
export async function <%= `deleteOne${getSingularEntName()}` %>(
  params: <%= getGetOneParamsName() %>,
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
      <%_ }); -%>
  fieldRequest?: <%= entity.strings.fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
      <%_ (entity.api.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
      <%_ }); -%>
  );
  const one = await service.getOne(params);
  await service.beforeDeleteOne(one);
  const deletedOne = await service.deleteOne(one);
  await service.afterDeleteOne(deletedOne);
  return await <%= `build${getOneResponseName()}` %>(deletedOne, fieldRequest);
}
    <%_ } -%>
  <%_ } -%>
<% } -%>
