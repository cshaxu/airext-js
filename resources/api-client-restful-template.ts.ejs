<%
function getApiBasePath() {
  const kababCased = utils.toKababCase(utils.pluralize(entity.name));
  return `${config.apiBasePath}/${kababCased}`;
}

function isDateTypeField(field) {
  return field.strings.fieldClass === "Date";
}

function presentField(field) {
  const presenter = utils.isEntityTypeField(field)
    ? `${field._type._entity.strings.restfulAxios}.present`
    : isDateTypeField(field)
    ? 'new Date'
    : 'INVALID';
  const onePresenter = `${presenter}(one.${field.name})`;
  if (utils.isArrayField(field)) {
    return `one.${field.name}.map(${presenter})`;
  }
  if (utils.isNullableField(field)) {
    return `one.${field.name} === null ? null : ${onePresenter}`;
  }
  return onePresenter;
}
-%>
<% if (utils.isPresentableEntity(entity)) { -%>
import {
  <%= entity.strings.responseClass %>,
  <%_ if (entity.api) { -%>
  <%= entity.api.strings.manyResponse %>,
  <%= entity.api.strings.oneResponse %>,
    <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
    <%_ } -%>
  <%_ } -%>
} from './<%= entity.strings.typePackage %>';
  <%_ entity.types.filter(utils.isPresentableEntityType).filter((t) => t.name !== entity.name).forEach((type) => { -%>
import <%= type._entity.strings.restfulAxios %> from './<%= `${utils.toKababCase(type.name)}-restful` %>';
  <%_ }); -%>
  <%_ if (entity.api) { -%>
<%- config.axiosImport ?? "import axios from 'axios';" %>
    <%_ if (entity.api.booleans.hasGetMany) { -%>
import { toQueryString } from 'airext';
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetMany || entity.api.booleans.hasCreateOne || entity.api.booleans.hasUpdateOne) { -%>
import {
      <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
      <%_ } -%>
      <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
      <%_ } -%>
      <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
      <%_ } -%>
} from '<%= entity.api.request.import %>';
    <%_ } -%>
  <%_ } -%>

function present(one: any): <%= entity.strings.responseClass %> {
  return {
    ...one,
  <%_ entity.fields.filter(utils.isPresentableField).filter((f) => isDateTypeField(f) || utils.isEntityTypeField(f)).forEach((field) => { -%>
    ...(one.<%= field.name %> !== undefined && { <%= field.name %>: <%= presentField(field) %> }),
  <%_ }); -%>
  };
}
  <%_ if (entity.api) { -%>

function presentManyResponse(response: any): <%= entity.api.strings.manyResponse %> {
  const cursor = {
    ...response.cursor,
    <%_ entity.fields.filter((f) => f.strings.minVar && f.strings.maxVar && isDateTypeField(f)).forEach((field) => { -%>
    <%= field.strings.minVar %>: new Date(response.cursor.<%= field.strings.minVar %>),
    <%= field.strings.maxVar %>: new Date(response.cursor.<%= field.strings.maxVar %>),
    <%_ }); -%>
  };
  return { cursor, <%= entity.api.strings.manyEntsVar %>: response.<%= entity.api.strings.manyEntsVar %>.map(present) };
}

function presentOneResponse(response: any): <%= entity.api.strings.oneResponse %> {
  return { <%= entity.api.strings.oneEntVar %>: present(response.<%= entity.api.strings.oneEntVar %>) };
}
    <%_ if (entity.api.booleans.hasGetMany) { -%>

async function getMany(query: <%= entity.api.strings.getManyQuery %>): Promise<<%= entity.api.strings.manyResponse %>> {
  const queryString = toQueryString(query);
  const pathSuffix = queryString.length ? `?${queryString}` : '';
  const path = `<%= getApiBasePath() %>${pathSuffix}`;
  const { data } = await axios.get(path);
  return presentManyResponse(data);
}
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOne) { -%>

async function getOne(params: <%= entity.api.strings.getOneParams %>): Promise<<%= entity.api.strings.oneResponse %>> {
  const { <%= entity.api.keys.join(', ') %> } = params;
  const pathSuffix = `<%- entity.api.keys.map((key) => `\${${key}}` ).join('/') %>`;
  const path = `<%= getApiBasePath() %>/${pathSuffix}`;
  const { data } = await axios.get(path);
  return presentOneResponse(data);
}
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>

async function createOne(body: <%= entity.api.strings.createOneBody %>): Promise<<%= entity.api.strings.oneResponse %>> {
  const path = '<%= getApiBasePath() %>';
  const { data } = await axios.post(path, body);
  return presentOneResponse(data);
}
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>

async function updateOne(params: <%= entity.api.strings.getOneParams %>, body: <%= entity.api.strings.updateOneBody %>): Promise<<%= entity.api.strings.oneResponse %>> {
  const { <%= entity.api.keys.join(', ') %> } = params;
  const pathSuffix = `<%- entity.api.keys.map((key) => `\${${key}}` ).join('/') %>`;
  const path = `<%= getApiBasePath() %>/${pathSuffix}`;
  const { data } = await axios.put(path, body);
  return presentOneResponse(data);
}
    <%_ } -%>
    <%_ if (entity.api.booleans.hasDeleteOne) { -%>

async function deleteOne(params: <%= entity.api.strings.getOneParams %>): Promise<<%= entity.api.strings.oneResponse %>> {
  const { <%= entity.api.keys.join(', ') %> } = params;
  const pathSuffix = `<%- entity.api.keys.map((key) => `\${${key}}` ).join('/') %>`;
  const path = `<%= getApiBasePath() %>/${pathSuffix}`;
  const { data } = await axios.delete(path);
  return presentOneResponse(data);
}
    <%_ } -%>
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= entity.strings.restfulAxios %> = {
  <%_ if (utils.isPresentableEntity(entity)) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  present,
  <%_ } -%>
  <%_ if (utils.isPresentableEntity(entity) && entity.api) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  presentManyResponse,
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  presentOneResponse,
    <%_ if (entity.api.booleans.hasGetMany) { -%>
      <%_ if (entity.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  getMany,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOne) { -%>
      <%_ if (entity.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  getOne,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>
      <%_ if (entity.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  createOne,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>
      <%_ if (entity.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  updateOne,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasDeleteOne) { -%>
      <%_ if (entity.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  deleteOne,
    <%_ } -%>
  <%_ } -%>
};

export default <%= entity.strings.restfulAxios %>;
<% } -%>
