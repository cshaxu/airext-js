<% if (!schema.internal /* hasManyResponse() || hasOneResponse() */) { -%>
import {
  <%= getThisEntityStrings().fieldRequestClass %>,
  <%= getThisEntityStrings().responseClass %>,
} from './<%= getThisEntityStrings().typePackage %>';
import { <%= getThisEntityStrings().entityClass %> } from '../<%= getThisEntityStrings().entityPackage %>';
  <%_ if (schema.service) { -%>
import { <%= getServiceName() %> } from '<%= schema.service.import %>';
  <%_ } -%>
  <%_ schema.types.filter(isExternalType).forEach((type) => { -%>
import { <%= getTypeStrings(type).externalClass %> } from '<%= getTypeStrings(type).externalPackage %>';
  <%_ }); -%>
  <%_ schema.types.filter(isInternalType).forEach((type) => { -%>
import { <%= getTypeStrings(type).typeName %> } from './<%= getThisEntityStrings().typePackage %>';
  <%_ }); -%>
<% } -%>
<% if (!schema.internal /* hasExternalGetMany() */) { -%>
import { exists } from '<%= config.airentPackage %>';
<% } -%>
<% if (hasExternalGetMany()) { -%>
import { <%= getGetManyQueryName() %> } from '<%= schema.methods.getMany.import %>';
<% } -%>
<% if (hasExternalCreateOne()) { -%>
import { <%= getCreateOneBodyName() %> } from '<%= schema.methods.create.import %>';
<% } -%>
<% if (hasExternalUpdateOne()) { -%>
import { <%= getUpdateOneBodyName() %> } from '<%= schema.methods.update.import %>';
<% } -%>
<% if (hasGetOne()) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export type <%= getGetOneParamsName() %> = {
  <%_ schema.methods.getOne.keys.forEach((key) => { -%>
  <%= key %>: <%= queryField(key).type %>;
  <%_ }); -%>
};
<% } -%>
<% if (!schema.internal /* hasManyResponse() */) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export type <%= getCursorName() %> = {
  count: number;
  <%_ schema.fields.filter(isCursorField).forEach((field) => { -%>
    <%_ if (field.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  <%= `min${toTitleCase(field.name)}` %>?: <%= getFieldStrings(field).fieldResponseType %>;
    <%_ if (field.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  <%= `max${toTitleCase(field.name)}` %>?: <%= getFieldStrings(field).fieldResponseType %>;
  <%_ }); -%>
};

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export type <%= getManyResponseName() %> = {
  cursor: <%= getCursorName() %>;
  <%_ if (schema.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  <%= getManyEntitiesVarName() %>: <%= getThisEntityStrings().responseClass %>[];
};
<% } -%>
<% if (!schema.internal /* hasOneResponse() */) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export type <%= getOneResponseName() %> = {
  <%_ if (schema.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  <%= getOneEntityVarName() %>: <%= getThisEntityStrings().responseClass %>;
};
<% } -%>
<% if (hasExternalGetMany()) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `getMany${getPluralEntityName()}` %>(
  query: <%= getGetManyQueryName() %>,
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
  <%_ }); -%>
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %>,
): Promise<<%= getManyResponseName() %>> {
  const service = new <%= getServiceName() %>(
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
  <%_ }); -%>
  );
  await service.beforeGetMany(query);
  const many = await service.getMany(query);
  await service.afterGetMany(many, query);
  return await <%= `build${getManyResponseName()}` %>(many, fieldRequest);
}
<% } -%>
<% if (hasExternalGetOne()) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `getOne${getThisEntityStrings().entName}` %>(
  params: <%= getGetOneParamsName() %>,
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
  <%_ }); -%>
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
  <%_ }); -%>
  );
  await service.beforeGetOne(params);
  const one = await service.getOne(params);
  await service.afterGetOne(one, params);
  return await <%= `build${getOneResponseName()}` %>(one, fieldRequest);
}
<% } -%>
<% if (hasExternalCreateOne()) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `createOne${getThisEntityStrings().entName}` %>(
  body: <%= getCreateOneBodyName() %>,
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
  <%_ }); -%>
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
  <%_ }); -%>
  );
  await service.beforeCreateOne(body);
  const one = await service.createOne(body);
  await service.afterCreateOne(one, body);
  return await <%= `build${getOneResponseName()}` %>(one, fieldRequest);
}
<% } -%>
<% if (hasExternalUpdateOne()) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `updateOne${getThisEntityStrings().entName}` %>(
  params: <%= getGetOneParamsName() %>,
  body: <%= getUpdateOneBodyName() %>,
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
  <%_ }); -%>
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
  <%_ }); -%>
  );
  const one = await service.getOne(params);
  await service.beforeUpdateOne(one, body);
  const updatedOne = await service.updateOne(one, body);
  await service.afterUpdateOne(updatedOne, body);
  return await <%= `build${getOneResponseName()}` %>(updatedOne, fieldRequest);
}
<% } -%>
<% if (hasExternalDeleteOne()) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `deleteOne${getThisEntityStrings().entName}` %>(
  params: <%= getGetOneParamsName() %>,
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
  <%= field.name %>: <%= field.type %>,
  <%_ }); -%>
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %>,
): Promise<<%= getOneResponseName() %>> {
  const service = new <%= getServiceName() %>(
  <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>,
  <%_ }); -%>
  );
  const one = await service.getOne(params);
  await service.beforeDeleteOne(one);
  const deletedOne = await service.deleteOne(one);
  await service.afterDeleteOne(deletedOne);
  return await <%= `build${getOneResponseName()}` %>(deletedOne, fieldRequest);
}
<% } -%>
<% if (!schema.internal /* hasManyResponse() */) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `build${getManyResponseName()}` %>(
  many: <%= getThisEntityStrings().entityClass %>[],
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %> | boolean,
): Promise<<%= getManyResponseName() %>> {
  const <%= getManyEntitiesVarName() %> = await <%= getThisEntityStrings().entityClass %>.presentMany(many, fieldRequest);
  <%_ schema.fields.filter(isCursorField).forEach((field) => { -%>
  const <%= `min${toTitleCase(field.name)}` %> = many
    .map((one) => one.<%= field.name %>)
    .filter(exists)
    .reduce(
      (acc, value) => (acc === undefined || acc > value ? value : acc),
      undefined as <%= field.type %> | undefined
    );
  const <%= `max${toTitleCase(field.name)}` %> = many
    .map((one) => one.<%= field.name %>)
    .filter(exists)
    .reduce(
      (acc, value) => (acc === undefined || acc < value ? value : acc),
      undefined as <%= field.type %> | undefined
    );
  <%_ }); -%>
  const cursor = {
    count: many.length,
  <%_ schema.fields.filter(isCursorField).forEach((field) => { -%>
    <%= `min${toTitleCase(field.name)}` %>,
    <%= `max${toTitleCase(field.name)}` %>,
  <%_ }); -%>
  };
  return { cursor, <%= getManyEntitiesVarName() %> };
}
<% } -%>
<% if (!schema.internal /* hasOneResponse() */) { -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export async function <%= `build${getOneResponseName()}` %>(
  one: <%= getThisEntityStrings().entityClass %>,
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %> | boolean,
): Promise<<%= getOneResponseName() %>> {
  const <%= getOneEntityVarName() %> = await one.present(fieldRequest);
  return { <%= getOneEntityVarName() %> };
}
<% } -%>
