<% if (!schema.internal) { -%>
import {
  <%= getThisEntityStrings().fieldRequestClass %>,
  <%= getThisEntityStrings().responseClass %>,
} from './<%= getThisEntityStrings().typePackage %>';
import { <%= getThisEntityStrings().entityClass %> } from '../<%= getThisEntityStrings().entityPackage %>';

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export type <%= `Many${pluralize(getThisEntityStrings().entName)}Cursor` %> = {
  count: number;
<% schema.fields.filter(isCursorField).forEach((field) => { -%>
  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  min<%= toTitleCase(field.name) %>?: <%= getFieldStrings(field).fieldResponseType %>;
  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  max<%= toTitleCase(field.name) %>?: <%= getFieldStrings(field).fieldResponseType %>;
<% }); -%>
};

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export type <%= `Many${pluralize(getThisEntityStrings().entName)}Response` %> = {
  cursor: <%= `Many${pluralize(getThisEntityStrings().entName)}Cursor` %>;
<% if (schema.deprecated) { -%>
  /** @deprecated */
<% } -%>
  <%= pluralize(toCamelCase(getThisEntityStrings().entName)) %>: <%= getThisEntityStrings().responseClass %>[];
};

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export type <%= `One${getThisEntityStrings().entName}Response` %> = {
  <%_ if (schema.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  <%= toCamelCase(getThisEntityStrings().entName) %>: <%= getThisEntityStrings().responseClass %>;
};

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export async function buildMany<%= pluralize(getThisEntityStrings().entName) %>Response(
  many: <%= getThisEntityStrings().entityClass %>[],
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %> | boolean,
): Promise<<%= `Many${pluralize(getThisEntityStrings().entName)}Response` %>> {
  const <%= pluralize(toCamelCase(getThisEntityStrings().entName)) %> =
    await <%= getThisEntityStrings().entityClass %>.presentMany(many, fieldRequest);
<% schema.fields.filter(isCursorField).forEach((field) => { -%>
  const min<%= toTitleCase(field.name) %> = many.reduce((acc, one) => {
    const value = one.<%= field.name %>;
    if (acc === undefined || acc > value) {
      return value;
    }
    return acc;
  }, undefined as <%= field.type %> | undefined);
  const max<%= toTitleCase(field.name) %> = many.reduce((acc, one) => {
    const value = one.<%= field.name %>;
    if (acc === undefined || acc < value) {
      return value;
    }
    return acc;
  }, undefined as <%= field.type %> | undefined);
<% }); -%>
  const cursor = {
    count: many.length,
<% schema.fields.filter(isCursorField).forEach((field) => { -%>
    min<%= toTitleCase(field.name) %>,
    max<%= toTitleCase(field.name) %>,
<% }); -%>
  };
  return { cursor, <%= pluralize(toCamelCase(getThisEntityStrings().entName)) %> };
}

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export async function buildOne<%= getThisEntityStrings().entName %>Response(
  one: <%= getThisEntityStrings().entityClass %>,
  fieldRequest?: <%= getThisEntityStrings().fieldRequestClass %> | boolean,
): Promise<<%= `One${getThisEntityStrings().entName}Response` %>> {
  const <%= toCamelCase(getThisEntityStrings().entName) %> = await one.present(fieldRequest);
  return { <%= toCamelCase(getThisEntityStrings().entName) %> };
}
<% } -%>
