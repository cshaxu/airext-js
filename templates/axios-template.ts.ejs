<%
function getApiBasePath() {
  const pluralized = pluralize(toTitleCase(schema.entityName));
  const kababCased = toKababCase(toCamelCase(pluralized));
  return `${config.apiBasePath}/${kababCased}`;
}

function presentField(field) {
  const presenter = isEntityTypeField(field)
    ? `${toTitleCase(toPrimitiveTypeName(field.type))}Axios.present`
    : isDateTypeField(field)
    ? 'new Date'
    : 'INVALID';
  const onePresenter = `${presenter}(one.${field.name})`;
  if (isArrayField(field)) {
    return `one.${field.name}.map(${presenter})`;
  }
  if (isNullableField(field)) {
    return `one.${field.name} === null ? null : ${onePresenter}`;
  }
  return onePresenter;
}
-%>
<% if (!schema.internal) { -%>
import { <%= schema.strings.responseClass %> } from './<%= schema.strings.typePackage %>';
  <%_ schema.types.filter(isEntityType).filter((type) => type.name !== schema.entityName).forEach((type) => { -%>
import <%= `${toTitleCase(type.name)}Axios` %> from './<%= `${toKababCase(type.name)}-axios` %>';
  <%_ }); -%>
import { <%= getManyResponseName() %> } from './<%= getApiPackageName() %>';
import { <%= getOneResponseName() %> } from './<%= getApiPackageName() %>';
  <%_ if (schema.api) { -%>
import axios from '<%= config.axiosPackage ?? 'axios' %>';
    <%_ if (hasGetMany()) { -%>
import { toQueryString } from 'airext';
    <%_ } -%>
    <%_ if (hasGetOne() || hasDeleteOne()) { -%>
import { <%= getGetOneParamsName() %> } from './<%= getApiPackageName() %>';
    <%_ } -%>
    <%_ if (hasGetMany() || hasCreateOne() || hasUpdateOne()) { -%>
import {
      <%_ if (hasGetMany()) { -%>
  <%= getGetManyQueryName() %>,
      <%_ } -%>
      <%_ if (hasCreateOne()) { -%>
  <%= getCreateOneBodyName() %>,
      <%_ } -%>
      <%_ if (hasUpdateOne()) { -%>
  <%= getUpdateOneBodyName() %>,
      <%_ } -%>
} from '<%= schema.api.request.import %>';
    <%_ } -%>
  <%_ } -%>

function present(one: any): <%= schema.strings.responseClass %> {
  return {
    ...one,
  <%_ schema.fields.filter(isExternalField).filter((field) => isDateTypeField(field) || isEntityTypeField(field)).forEach((field) => { -%>
    ...(one.<%= field.name %> !== undefined && { <%= field.name %>: <%= presentField(field) %> }),
  <%_ }); -%>
  };
}

function presentManyResponse(response: any): <%= getManyResponseName() %> {
  const cursor = {
    ...response.cursor,
  <%_ schema.fields.filter(isDateTypeField).filter(isCursorField).forEach((field) => { -%>
    <%= `min${toTitleCase(field.name)}` %>: new Date(response.cursor.<%= `min${toTitleCase(field.name)}` %>),
    <%= `max${toTitleCase(field.name)}` %>: new Date(response.cursor.<%= `max${toTitleCase(field.name)}` %>),
  <%_ }); -%>
  };
  return { cursor, <%= getManyEntitiesVarName() %>: response.<%= getManyEntitiesVarName() %>.map(present) };
}

function presentOneResponse(response: any): <%= getOneResponseName() %> {
  return { <%= getOneEntityVarName() %>: present(response.<%= getOneEntityVarName() %>) };
}

  <%_ if (schema.api) { -%>
    <%_ if (hasGetMany()) { -%>

async function getMany(query: <%= getGetManyQueryName() %>): Promise<<%= getManyResponseName() %>> {
  const queryString = toQueryString(query);
  const pathSuffix = queryString.length ? `?${queryString}` : '';
  const path = `<%= getApiBasePath() %>${pathSuffix}`;
  const { data } = await axios.get(path);
  return presentManyResponse(data);
}
    <%_ } -%>
    <%_ if (hasGetOne()) { -%>

async function getOne(params: <%= getGetOneParamsName() %>): Promise<<%= getOneResponseName() %>> {
  const { <%= schema.api.keys.join(', ') %> } = params;
  const pathSuffix = `<%- schema.api.keys.map((key) => `\${${key}}` ).join('/') %>`;
  const path = `<%= getApiBasePath() %>/${pathSuffix}`;
  const { data } = await axios.get(path);
  return presentOneResponse(data);
}
    <%_ } -%>
    <%_ if (hasCreateOne()) { -%>

async function createOne(body: <%= getCreateOneBodyName() %>): Promise<<%= getOneResponseName() %>> {
  const path = '<%= getApiBasePath() %>';
  const { data } = await axios.post(path, body);
  return presentOneResponse(data);
}
    <%_ } -%>
    <%_ if (hasUpdateOne()) { -%>

async function updateOne(params: <%= getGetOneParamsName() %>, body: <%= getUpdateOneBodyName() %>): Promise<<%= getOneResponseName() %>> {
  const { <%= schema.api.keys.join(', ') %> } = params;
  const pathSuffix = `<%- schema.api.keys.map((key) => `\${${key}}` ).join('/') %>`;
  const path = `<%= getApiBasePath() %>/${pathSuffix}`;
  const { data } = await axios.put(path, body);
  return presentOneResponse(data);
}
    <%_ } -%>
    <%_ if (hasDeleteOne()) { -%>

async function deleteOne(params: <%= getGetOneParamsName() %>): Promise<<%= getOneResponseName() %>> {
  const { <%= schema.api.keys.join(', ') %> } = params;
  const pathSuffix = `<%- schema.api.keys.map((key) => `\${${key}}` ).join('/') %>`;
  const path = `<%= getApiBasePath() %>/${pathSuffix}`;
  const { data } = await axios.delete(path);
  return presentOneResponse(data);
}
    <%_ } -%>
  <%_ } -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= `${toTitleCase(schema.entityName)}Axios` %> = {
    <%_ if (schema.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  present,
  <%_ if (!schema.internal) { -%>
    <%_ if (schema.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  presentManyResponse,
    <%_ if (schema.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  presentOneResponse,
  <%_ } -%>
  <%_ if (schema.api) { -%>
    <%_ if (hasGetMany()) { -%>
      <%_ if (schema.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  getMany,
    <%_ } -%>
    <%_ if (hasGetOne()) { -%>
      <%_ if (schema.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  getOne,
    <%_ } -%>
    <%_ if (hasCreateOne()) { -%>
      <%_ if (schema.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  createOne,
    <%_ } -%>
    <%_ if (hasUpdateOne()) { -%>
      <%_ if (schema.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  updateOne,
    <%_ } -%>
    <%_ if (hasDeleteOne()) { -%>
      <%_ if (schema.deprecated) { -%>
  /** @deprecated */
      <%_ } -%>
  deleteOne,
    <%_ } -%>
  <%_ } -%>
};

export default <%= `${toTitleCase(schema.entityName)}Axios` %>;
<% } -%>
