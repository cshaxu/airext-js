<% if (!schema.internal && schema.api) { -%>
import { <%= schema.strings.entityClass %> } from '../<%= schema.strings.entityPackage %>';
  <%_ schema.types.filter(isExternalType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
  <%_ schema.types.filter(isInternalType).forEach((type) => { -%>
import { <%= type.strings.typeName %> } from './<%= schema.strings.typePackage %>';
  <%_ }); -%>
  <%_ if (hasInternalGetOne()) { -%>
import { <%= getGetOneParamsName() %> } from './<%= getApiPackageName() %>';
  <%_ } -%>
  <%_ if (hasGetMany() || hasCreateOne() || hasUpdateOne()) { -%>
import {
    <%_ if (hasGetMany()) { -%>
  <%= getGetManyQueryName() %>,
    <%_ } -%>
    <%_ if (hasCreateOne()) { -%>
  <%= getCreateOneBodyName() %>,
    <%_ } -%>
    <%_ if (hasUpdateOne()) { -%>
  <%= getUpdateOneBodyName() %>,
    <%_ } -%>
} from '<%= schema.api.request.import %>';
  <%_ } -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export abstract class <%= `${getServiceName()}Base` %> {
  <%_ if (schema.api.service.fields?.length) { -%>
    <%_ schema.api.service.fields.forEach((field) => { -%>
  protected <%= field.name %>: <%= field.type %>;
    <%_ }); -%>

  public constructor(
    <%_ schema.api.service.fields.forEach((field) => { -%>
    <%= field.name %>: <%= field.type %>,
    <%_ }); -%>
  ) {
    <%_ schema.api.service.fields.forEach((field) => { -%>
    this.<%= field.name %> = <%= field.name %>;
    <%_ }); -%>
  }
  <%_ } -%>
  <%_ if (hasGetMany()) { -%>

  public async beforeGetMany(query: <%= getGetManyQueryName() %>): Promise<void> {}

  public async afterGetMany(many: <%= schema.strings.entityClass %>[], query: <%= getGetManyQueryName() %>): Promise<void> {}

  public abstract getMany(query: <%= getGetManyQueryName() %>): Promise<<%= schema.strings.entityClass %>[]>;
  <%_ } -%>
  <%_ if (hasGetOne()) { -%>

  public async beforeGetOne(params: <%= getGetOneParamsName() %>): Promise<void> {}
  
  public async afterGetOne(one: <%= schema.strings.entityClass %>, params: <%= getGetOneParamsName() %>): Promise<void> {}
  <%_ } -%>
  <%_ if (hasInternalGetOne()) { -%>

  public abstract getOne(params: <%= getGetOneParamsName() %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (hasCreateOne()) { -%>

  public async beforeCreateOne(body: <%= getCreateOneBodyName() %>): Promise<void> {}

  public async afterCreateOne(createdOne: <%= schema.strings.entityClass %>, body: <%= getCreateOneBodyName() %>): Promise<void> {}

  public abstract createOne(body: <%= getCreateOneBodyName() %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (hasUpdateOne()) { -%>

  public async beforeUpdateOne(one: <%= schema.strings.entityClass %>, body: <%= getUpdateOneBodyName() %>): Promise<void> {}

  public async afterUpdateOne(updatedOne: <%= schema.strings.entityClass %>, body: <%= getUpdateOneBodyName() %>): Promise<void> {}

  public abstract updateOne(one: <%= schema.strings.entityClass %>, body: <%= getUpdateOneBodyName() %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (hasDeleteOne()) { -%>

  public async beforeDeleteOne(one: <%= schema.strings.entityClass %>): Promise<void> {}

  public async afterDeleteOne(deletedOne: <%= schema.strings.entityClass %>): Promise<void> {}

  public abstract deleteOne(one: <%= schema.strings.entityClass %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
}
<% } -%>
