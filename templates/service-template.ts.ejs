<% if (schema.methods) { -%>
import { <%= schema.strings.entityClass %> } from '../<%= schema.strings.entityPackage %>';
  <%_ schema.types.filter(isExternalType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
  <%_ schema.types.filter(isInternalType).forEach((type) => { -%>
import { <%= type.strings.typeName %> } from './<%= schema.strings.typePackage %>';
  <%_ }); -%>
  <%_ if (hasGetOne()) { -%>
import { <%= getGetOneParamsName() %> } from './<%= getApiPackageName() %>';
  <%_ } -%>
  <%_ if (hasGetMany()) { -%>
import { <%= getGetManyQueryName() %> } from '<%= schema.methods.getMany.import %>';
  <%_ } -%>
  <%_ if (hasCreateOne()) { -%>
import { <%= getCreateOneBodyName() %> } from '<%= schema.methods.create.import %>';
  <%_ } -%>
  <%_ if (hasUpdateOne()) { -%>
import { <%= getUpdateOneBodyName() %> } from '<%= schema.methods.update.import %>';
  <%_ } -%>

  <%_ if (schema.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export abstract class <%= `${getServiceName()}Base` %> {
  <%_ if (schema.service?.fields?.length) { -%>
    <%_ (schema.service.fields ?? []).forEach((field) => { -%>
  protected <%= field.name %>: <%= field.type %>;
    <%_ }); -%>

  public constructor(
    <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    <%= field.name %>: <%= field.type %>,
    <%_ }); -%>
  ) {
    <%_ (schema.service.fields ?? []).forEach((field) => { -%>
    this.<%= field.name %> = <%= field.name %>;
    <%_ }); -%>
  }
  <%_ } -%>
  <%_ if (hasGetMany()) { -%>
    <%_ if (hasExternalGetMany()) { -%>

  public async beforeGetMany(_query: <%= getGetManyQueryName() %>): Promise<void> {}

  public async afterGetMany(_many: <%= schema.strings.entityClass %>[], _query: <%= getGetManyQueryName() %>): Promise<void> {}
    <%_ } -%>

  public abstract getMany(query: <%= getGetManyQueryName() %>): Promise<<%= schema.strings.entityClass %>[]>;
  <%_ } -%>
  <%_ if (hasGetOne()) { -%>
    <%_ if (hasExternalGetOne()) { -%>

  public async beforeGetOne(_params: <%= getGetOneParamsName() %>): Promise<void> {}

  public async afterGetOne(_one: <%= schema.strings.entityClass %>, _params: <%= getGetOneParamsName() %>): Promise<void> {}
    <%_ } -%>

  public abstract getOne(params: <%= getGetOneParamsName() %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (hasCreateOne()) { -%>
    <%_ if (hasExternalCreateOne()) { -%>

  public async beforeCreateOne(_body: <%= getCreateOneBodyName() %>): Promise<void> {}

  public async afterCreateOne(_createdOne: <%= schema.strings.entityClass %>, _body: <%= getCreateOneBodyName() %>): Promise<void> {}
    <%_ } -%>

  public abstract createOne(body: <%= getCreateOneBodyName() %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (hasUpdateOne()) { -%>
    <%_ if (hasExternalUpdateOne()) { -%>

  public async beforeUpdateOne(_one: <%= schema.strings.entityClass %>, _body: <%= getUpdateOneBodyName() %>): Promise<void> {}

  public async afterUpdateOne(_updatedOne: <%= schema.strings.entityClass %>, _body: <%= getUpdateOneBodyName() %>): Promise<void> {}
    <%_ } -%>

  public abstract updateOne(one: <%= schema.strings.entityClass %>, body: <%= getUpdateOneBodyName() %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
  <%_ if (hasDeleteOne()) { -%>
    <%_ if (hasExternalDeleteOne()) { -%>

  public async beforeDeleteOne(_one: <%= schema.strings.entityClass %>): Promise<void> {}

  public async afterDeleteOne(_deletedOne: <%= schema.strings.entityClass %>): Promise<void> {}
    <%_ } -%>

  public abstract deleteOne(one: <%= schema.strings.entityClass %>): Promise<<%= schema.strings.entityClass %>>;
  <%_ } -%>
}
<% } -%>
